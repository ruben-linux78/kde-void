#!/bin/bash

# Gnome-void v1.0 Utilizalo bajo tu propia responsabilidad.

# colores
    # echo
    normal="$(tput sgr0)"
    # Regular
    Ua="$(tput smul)"
    Ue="$(tput rmul)"
    Bold="$(tput bold)"
    Std="$(tput setaf 9)"
    black="$(tput setaf 0)"
    red="$(tput setaf 1)"
    green="$(tput setaf 2)"
    yellow="$(tput setaf 3)"
    blue="$(tput setaf 4)"
    magenta="$(tput setaf 5)"
    cyan="$(tput setaf 6)"
    white="$(tput setaf 7)"

# Funciones

dots ()
{
    # Puntos hasta finalzar el proceso
    while ps -p $spid > /dev/null 2>&1; do
        echo -n "."
        sleep .5
    done
}

enable_svs ()
{
    for i in $svs; do
        echo -n "- enable service \"$i\"... "
        ln -s /etc/sv/"$i" /var/service > /dev/null 2>&1
        if [ ! $? -eq 0 ]; then
            echo "${red}not enabled${normal}"
            error_svs=$error_svs"$i "
        else
            echo "${green}enabled${normal}"
        fi
    done
}

install_pkg ()
{
    for i in $pkg; do
        echo -n "- install \"$i\"..."
        xbps-install -y "$i" > /dev/null 2>&1 &
        spid=$!
        sleep .5
        dots &
        wait $spid
        if [ ! $? -eq 0 ]; then
            echo "${red}not installed${normal}"
        else
            echo "${green}installed${normal}"
        fi
    done
}

update ()
{
    xbps-install "$opt" > /dev/null 2>&1 &
        spid=$!
        sleep .5
        dots &
        wait $spid
        if [ ! $? -eq 0 ]; then
            echo "${red}no success${normal}"
        else
            echo "${green}success${normal}"
        fi
}

# Preguntas
read -p "Choose your language (us, de, fr, ...): " lang
while true; do
    userlist="$(cut -d ":" -f1 /etc/passwd)"
    found=0
    read -p "Enter your username (lower_case): " username
    for j in $userlist; do
        if [[ "$username" = "$j" ]]; then
            found=1
            break
        else
            continue
        fi
    done
    if [ "$found" -eq 1 ]; then
        echo -e "user found: \"$username\""
        break
    else
        echo -"no user \"$username\""
        while true; do
            read -p "try again (Y/n)? " yn
            case $yn in
                [Nn])
                    exit 0
                ;;
                [Yy]|"")
                    break
                ;;
                *)
                    echo "please answer y or n (Y or N)"
                ;;
            esac
        done
    fi
done

while true; do
    read -p "Do you have an Intel CPU? (y/n)" yn
    case $yn in
        [Nn])
            intel=0
            break
        ;;
        [Yy])
            intel=1
            break
        ;;
        *|"")
            echo "please answer y or n (Y or N)"
        ;;
    esac
done

while true; do
    read -p "Is this a laptop? (y/n)" yn
    case $yn in
        [Nn])
            laptop=0
            break
        ;;
        [Yy])
            laptop=1
            break
        ;;
        *|"")
            echo "please answer y or n (Y or N)"
        ;;
    esac
done

# Actualizar y Sync
    echo
    echo "XBPS"
    xbps-install -uy xbps > /dev/null 2>&1
    echo -n "- update system..."; opt="-Suy"
        update "$opt"
    echo -n "- install non-free repo..."; opt="void-repo-nonfree"
        update "$opt"
    echo -n "- sync repos..."; opt="-S"
        update "$opt"

# Instalar herramientas
    echo
    echo "Tools"
    pkg="curl git wget nano vim htop btop fastfetch libzip libzstd octoxbps xdotool xtools mtools linux-headers"
    install_pkg "$pkg"
    xcheckrestart

# Hardware
    if [ "$intel" -eq 1 ]; then
    echo
    echo "Intel Microcode"
        pkg="intel-ucode"
        install_pkg "$pkg"
    echo -n "- reconfigure kernel..."
        kernel_version=$(uname -r) > /dev/null 2>&1
        xbps-reconfigure -f linux"${kernel_version:0:3}" > /dev/null 2>&1 &
        spid=$!
        sleep .5
        dots &
        wait $spid
        if [ ! $? -eq 0 ]; then
            echo "${red}no success${normal}"
        else
            echo "${green}success${normal}"
        fi
    fi

# Herramientas Laptop
    if [ "$laptop" -eq 1 ]; then
    echo
    echo "Laptop Tools"
        pkg="tlp cpupower upower powerdevil"
        svs="tlp"
        install_pkg "$pkg"
        enable_svs "$svs"
    fi

# Escritorio Gnome
    echo
    echo "Gnome"
        pkg="xorg gnome gdm xz unzip zip gptfdisk gparted mlocate ntfs-3g fuse-exfat bash-completion gtksourceview4 autoconf automake bison m4 make libtool flex meson ninja optipng sassc libwebkit2gtk41-devel libwebkit2gtk41 webkit2gtk webkit2gtk-devel json-glib-devel json-glib go gcc pkg-config efibootmgr gvfs-smb samba gvfs-goa gvfs-gphoto2 gvfs-mtp gvfs-afc gvfs-afp libfido2 ykclient libyubikey pam-u2f gnome-browser-connector gnome-software xdg-desktop-portal xdg-desktop-portal-gtk xdg-desktop-portal-gnome xdg-user-dirs xdg-user-dirs-gtk xdg-utils hunspell-${lang}_${lang^^} mediainfo firefox firefox-i18n-es-ES"

# Seguridad
    echo
    echo "Security"
        pkg="apparmor ufw"
        install_pkg "$pkg"
    # Entradas del Boot
    echo -n "Configure GRUB..."
        line=$(grep "GRUB_CMDLINE_LINUX_DEFAULT" /etc/default/grub)
        line="${line::-1} apparmor=1 security=apparmor\""
        sed -i "s/^GRUB_CMDLINE_LINUX_DEFAULT.*/$line/" /etc/default/grub
        update-grub > /dev/null 2>&1
    echo "done"
    # Habilitar Firewall
    echo -n "Configure Firewall..."
        svs="ufw"
        enable_svs "ufw"
        sv up ufw > /dev/null 2>&1
        ufw allow ssh > /dev/null 2>&1
        ufw allow 1714:1764/tcp > /dev/null 2>&1
        ufw allow 1714:1764/udp > /dev/null 2>&1
        ufw enable > /dev/null 2>&1

# Impresoras
    echo
    echo "Printer Support"
        pkg="cups cups-filters hplip print-manager"
        svs="cupsd cups-browsed"
        install_pkg "$pkg"
        enable_svs "$svs"
    echo -ne "Add user \"$username\" to printer admin group..."
        usermod -aG lpadmin "$username"
    echo "done"

# Codecs
    echo
    echo "Codecs"
    if [ "$intel" -eq 1 ]; then
        pkg="intel-video-accel mesa-intel-dri"
        install_pkg "$pkg"
    fi
        pkg="mesa-vaapi ffmpegthumbs ffmpeg ffmpegthumbnailer gst-plugins-good1 gst-plugins-ugly1 gstreamer1-pipewire libspa-ffmpeg mesa-opencl"
        install_pkg "$pkg"

# Sonido Pipewire
    echo
    echo "Sound"
        pkg="pipewire alsa-utils alsa-pipewire wireplumber libjack-pipewire libspa-bluetooth"
        svs="alsa"
        install_pkg "$pkg"
        enable_svs "$svs"
    echo -n "Configure Pipewire..."
        mkdir -p /etc/xdg/autostart/ > /dev/null 2>&1
        ln -s /usr/share/applications/pipewire.desktop /etc/xdg/autostart/pipewire.desktop > /dev/null 2>&1
        mkdir -p /etc/pipewire/pipewire.conf.d > /dev/null 2>&1
        ln -s /usr/share/examples/wireplumber/10-wireplumber.conf /etc/pipewire/pipewire.conf.d/ > /dev/null 2>&1
        ln -s /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/ > /dev/null 2>&1
        mkdir -p /etc/alsa/conf.d > /dev/null 2>&1
        ln -s /usr/share/alsa/alsa.conf.d/50-pipewire.conf /etc/alsa/conf.d > /dev/null 2>&1
        ln -s /usr/share/alsa/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d > /dev/null 2>&1
    echo "...${green}done${normal}"

# VirtualizaciÃ³n
    echo
    echo "Virt-Manager, QEMU"
        pkg="virt-manager virt-manager-tools qemu libvirt openbsd-netcat dnsmasq vde2 bridge-utils"
        install_pkg "$pkg"
        svs="virtlockd virtlogd virtnetworkd virtstoraged virtqemud libvirtd"
    line1=$(grep '#security_driver =' /etc/libvirt/qemu.conf)
    line2='security_driver = "none"'
    sed -i "s/^#security_driver.*/${line1}\n${line2}/" /etc/libvirt/qemu.conf

# Software Adicional flatpak
    echo
    echo "Flatpak"
        pkg="flatpak"
        install_pkg "$pkg"
    echo -n "Add Flathub Repo..."
        flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo > /dev/null 2>&1
    echo "done"
        echo -n "Install flatseal..."
        flatpak install -y com.github.tchx84.Flatseal > /dev/null 2>&1 &
        spid=$!
        sleep .5
        dots &
        wait $spid
        if [ ! $? -eq 0 ]; then
            echo "${red}not installed${normal}"
            # error_pkg=$error_pkg"$i "
        else
            echo "${green}installed${normal}"
        fi

        svs="gdm dbus NetworkManager bluetoothd"
        install_pkg "$pkg"
        enable_svs "$svs"
        echo -n "Configure GDM..."
            echo "setxkbmap $lang" >> /usr/share/gdm/scripts/Xsetup
            mkdir /etc/gdm.conf.d
            touch gdm_settings.conf
            echo "[Autologin]" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "Relogin=false" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "Session=" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "User=" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "[General]" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "HaltCommand=" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "RebootCommand=" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "[Theme]" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "Current=breeze" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "[Users]" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "MaximumUid=60000" >> /etc/gdm.conf.d/gdm_settings.conf
            echo "MinimumUid=1000" >> /etc/gdm.conf.d/gdm_settings.conf
        echo "done"


# Reiniciar
while true; do
    read -p "Reboot now (recommended)? [Y/n] " yn
    case $yn in
        [Yy]|"")
            reboot
            break
        ;;
        [Nn])
            exit 0
            break
        ;;
        *)
            echo "Please enter y or n (Y or N)?"
        ;;
    esac
done

